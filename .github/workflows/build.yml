name: Build and Test

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  wheel-linux-x86_64:
    name: Build Linux wheels (x86-64)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.10"
          channels: conda-forge
          channel-priority: strict
      - name: Install dependencies
        shell: bash -el {0}
        run: |
          conda install -c conda-forge "hdf5=1.12.2=nompi*" rust maturin gxx_linux-64
          pip install cibuildwheel
      - name: Build wheels
        shell: bash -el {0}
        run: |
          export HDF5_DIR=$CONDA_PREFIX
          export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=$CONDA_PREFIX/bin/x86_64-conda-linux-gnu-gcc
          export RUSTFLAGS="-C linker=$CONDA_PREFIX/bin/x86_64-conda-linux-gnu-gcc"
          maturin build --release --target x86_64-unknown-linux-gnu
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-x86_64
          path: target/wheels/*.whl

  wheel-macos-x86_64:
    name: Build MacOS wheels (x86-64)
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.10"
          channels: conda-forge
          channel-priority: strict
      - name: Install dependencies
        shell: bash -el {0}
        run: |
          conda install -c conda-forge "hdf5=1.12.2=nompi*" rust maturin
          pip install cibuildwheel
      - name: Build wheels
        shell: bash -el {0}
        run: |
          export HDF5_DIR=$CONDA_PREFIX
          maturin build --release
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-x86_64
          path: target/wheels/*.whl

  sdist:
    runs-on: ubuntu-latest
    name: Build source distribution
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.10"
          channels: conda-forge
          channel-priority: strict
      - name: Install dependencies
        shell: bash -el {0}
        run: |
          conda install -c conda-forge "hdf5=1.12.2=nompi*" rust maturin gxx_linux-64
          pip install build
      - name: Build source distribution
        shell: bash -el {0}
        run: |
          export HDF5_DIR=$CONDA_PREFIX
          export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=$CONDA_PREFIX/bin/x86_64-conda-linux-gnu-gcc
          export RUSTFLAGS="-C linker=$CONDA_PREFIX/bin/x86_64-conda-linux-gnu-gcc"
          maturin sdist -v
          echo "Listing target directory:"
          find target -type f -name "*.tar.gz" | sort
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: target/wheels/*.tar.gz

  test-artifacts:
    needs: [wheel-linux-x86_64, wheel-macos-x86_64, sdist]
    runs-on: ${{ matrix.os }}
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download wheel for Linux
        if: matrix.os == 'ubuntu-latest'
        uses: actions/download-artifact@v4
        with:
          name: wheels-linux-x86_64
          path: dist/

      - name: Download wheel for macOS
        if: matrix.os == 'macos-latest'
        uses: actions/download-artifact@v4
        with:
          name: wheels-macos-x86_64
          path: dist/

      - name: Install package from wheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov
          # Find the wheel that matches the current Python version
          PYTHON_VERSION=$(python -c "import sys; print(f'{sys.version_info.major}{sys.version_info.minor}')")
          WHEEL_PATH=$(find dist -name "*cp${PYTHON_VERSION}*" -type f)
          if [ -z "$WHEEL_PATH" ]; then
            echo "No wheel found for Python ${PYTHON_VERSION}"
            ls -la dist/
            exit 1
          fi
          echo "Installing wheel: $WHEEL_PATH"
          python -m pip install $WHEEL_PATH

      - name: Run tests
        run: |
          # Create a temporary directory for tests
          mkdir -p test_dir
          cd test_dir

          # Create a simple test file
          echo 'import unittest' > test_helixerlite.py
          echo 'import helixerlite' >> test_helixerlite.py
          echo '' >> test_helixerlite.py
          echo 'class TestHelixerlite(unittest.TestCase):' >> test_helixerlite.py
          echo '    def test_import(self):' >> test_helixerlite.py
          echo '        """Test that the module can be imported."""' >> test_helixerlite.py
          echo '        self.assertTrue(hasattr(helixerlite, "__version__"))' >> test_helixerlite.py
          echo '        print(f"Successfully imported helixerlite version {helixerlite.__version__}")' >> test_helixerlite.py
          echo '' >> test_helixerlite.py
          echo 'if __name__ == "__main__":' >> test_helixerlite.py
          echo '    unittest.main()' >> test_helixerlite.py

          # Run the test
          python -m pytest test_helixerlite.py -v