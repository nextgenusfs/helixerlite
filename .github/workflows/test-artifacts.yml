name: Test Artifacts

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Build workflow run ID to get artifacts from'
        required: true
        type: string

jobs:
  test:
    runs-on: ${{ matrix.os }}
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download Linux wheel
        if: matrix.os == 'ubuntu-latest'
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: build.yml
          run_id: ${{ github.event.inputs.run_id }}
          name: wheels-linux-x86_64
          path: dist/

      - name: Download macOS wheel
        if: matrix.os == 'macos-latest'
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: build.yml
          run_id: ${{ github.event.inputs.run_id }}
          name: wheels-macos-x86_64
          path: dist/

      - name: Install package from wheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov
          python -m pip install dist/*.whl

      - name: Run tests
        run: |
          # Create a temporary directory for tests
          mkdir -p test_dir
          cd test_dir

          # Create a simple test file
          echo 'import unittest' > test_helixerlite.py
          echo 'import helixerlite' >> test_helixerlite.py
          echo '' >> test_helixerlite.py
          echo 'class TestHelixerlite(unittest.TestCase):' >> test_helixerlite.py
          echo '    def test_import(self):' >> test_helixerlite.py
          echo '        """Test that the module can be imported."""' >> test_helixerlite.py
          echo '        self.assertTrue(hasattr(helixerlite, "__version__"))' >> test_helixerlite.py
          echo '        print(f"Successfully imported helixerlite version {helixerlite.__version__}")' >> test_helixerlite.py
          echo '' >> test_helixerlite.py
          echo 'if __name__ == "__main__":' >> test_helixerlite.py
          echo '    unittest.main()' >> test_helixerlite.py

          # Run the test
          python -m pytest test_helixerlite.py -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false
