name: Build and Test Publish

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      publish_to_testpypi:
        description: 'Publish to TestPyPI'
        required: true
        default: false
        type: boolean

jobs:
  wheel-linux-x86_64:
    name: Build Linux wheels (x86-64)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.10"
          channels: conda-forge
          channel-priority: strict
      - name: Install dependencies
        shell: bash -el {0}
        run: |
          conda install -c conda-forge "hdf5=1.12.2=nompi*" rust maturin gxx_linux-64
          pip install cibuildwheel
      - name: Build wheels
        shell: bash -el {0}
        run: |
          export HDF5_DIR=$CONDA_PREFIX
          export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=$CONDA_PREFIX/bin/x86_64-conda-linux-gnu-gcc
          maturin build --release
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-x86_64
          path: target/wheels/*.whl

  wheel-macos-x86_64:
    name: Build MacOS wheels (x86-64)
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.10"
          channels: conda-forge
          channel-priority: strict
      - name: Install dependencies
        shell: bash -el {0}
        run: |
          conda install -c conda-forge "hdf5=1.12.2=nompi*" rust maturin
          pip install cibuildwheel
      - name: Build wheels
        shell: bash -el {0}
        run: |
          export HDF5_DIR=$CONDA_PREFIX
          maturin build --release
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-x86_64
          path: target/wheels/*.whl

  sdist:
    runs-on: ubuntu-latest
    name: Build source distribution
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.10"
          channels: conda-forge
          channel-priority: strict
      - name: Install dependencies
        shell: bash -el {0}
        run: |
          conda install -c conda-forge "hdf5=1.12.2=nompi*" rust maturin gxx_linux-64
          pip install build
      - name: Build source distribution
        shell: bash -el {0}
        run: |
          export HDF5_DIR=$CONDA_PREFIX
          export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=$CONDA_PREFIX/bin/x86_64-conda-linux-gnu-gcc
          maturin sdist
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: target/sdist/*.tar.gz

  test-upload:
    environment: TestPyPI
    runs-on: ubuntu-latest
    name: Upload to TestPyPI
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_testpypi == 'true'
    needs:
      - sdist
      - wheel-linux-x86_64
      - wheel-macos-x86_64
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
    steps:
      - name: Download source distribution
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist/
          merge-multiple: true
      - name: Download wheel distributions
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist/
          merge-multiple: true
      - name: List files in dist directory
        run: ls -la dist/
      - name: Publish distributions to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

  test-install:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_testpypi == 'true'
    needs: test-upload
    runs-on: ubuntu-latest
    name: Test installation from TestPyPI
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install from TestPyPI
        run: |
          # Wait a bit for the package to be available
          sleep 60
          # Try to install the package from TestPyPI
          python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ helixerlite
      - name: Verify installation
        run: |
          python -c "import helixerlite; print(f'Successfully installed helixerlite version {helixerlite.__version__}')"
